
int search(int arr[], int x, int n)
{
    for (int i = 0; i < n; i++)
      if (arr[i] == x)
         return i;
    return -1;
}


void printPostOrder(int in[], int pre[], int n)
{
   // The first element in pre[] is always root, search it
   // in in[] to find left and right subtrees
   int index = search(in, pre[0], n);
 
   // If left subtree is not empty, print left subtree
   if (root != 0)
      printPostOrder(in, pre+1, index);
 
   // If right subtree is not empty, print right subtree
   if (root != n-1)
      printPostOrder(in+index+1, pre+index+1, n-index-1);
 
   // Print root
   cout << pre[0] << " ";
}
