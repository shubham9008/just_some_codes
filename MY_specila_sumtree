#include <stdio.h>
#include <stdlib.h>
#include<bits/stdc++.h>
using namespace std;
/* A binary tree node has data, left child and right child */
struct node
{
    int data;
    struct node* left;
    struct node* right;
};
 
/* A utility function to get the sum of values in tree with root
  as root */
int sum(struct node *root)
{
    if(root==NULL)
    return 1;
    else{
         int s2,s1;
         int k=root->data;
        if(root->left!=NULL)
        s1=root->left->data;
        else
        s1=0;
        if(root->right)
        s2=root->right->data;
        else
        s2=0;
        cout<<k<<' '<<s1<<' '<<s2<<endl;
        
        if(k==s1+s2)
        {
          return(sum(root->left) and sum(root->right));  
        }
        else if(k!=0 and (s1+s2)==0)//assuming all values of the tree are +VE
        {
            return 1;
        }
        else if(k!=(s1+s2) and k!=0 and (s1+s2)!=0)
        return 0;
    }
}
 struct node* newNode(int data)
{
    struct node* node =
        (struct node*)malloc(sizeof(struct node));
    node->data = data;
    node->left = NULL;
    node->right = NULL;
    return(node);
}
 
/* Driver program to test above function */
int main()
{
    struct node *root  = newNode(13);
    root->left         = newNode(10);
    root->right        = newNode(3);
    root->left->left   = newNode(4);
    root->left->right  = newNode(6);
    root->right->right = newNode(3);
    if(sum(root))
        printf("The given tree is a SumTree ");
    else
        printf("The given tree is not a SumTree ");
 
    getchar();
    return 0;
}
